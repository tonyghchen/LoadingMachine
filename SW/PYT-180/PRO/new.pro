void Z_manual_to_zero(bool &is_first_z) ;
bool Chk_Angle() ;
void AxisMDY(char axis) ;
void ini_loopchk(bool val) ;
void Fill_DIST_Y(uint8 dist);
uint16 adc2sc(uint8 adc) ;
bool CHK_OVERFLOW1(uint8 phy_axis);
void load_config48(void) ;
void save_config48(void) ;
void load_dist_y(void);
void save_dist_y(void);
void DistYMody (void);
void load_config47(void) ;
void save_config47(void) ;
void load_gear_y(int idx);
void save_gear_y(int idx);
void GearYMody (void);
void Fill_REPAIR_Y();
void Mdy_PMfun (ActTbl_t HUGE  *a_tbl,uint8 axis);
void cal_wiregap();
void load_config46(void) ;
void save_config46(void) ;
void load_wiregap();
void save_wiregap();
void WireGapMody (void);
SDWORD Grid2_ExtGrid(SDWORD mov);
void load_config44(void);
void save_config44(void);
void load_repair_y(void);
void save_repair_y(void);
void RepairYMody (void);
void Fill_BreakCnt(int brk);
void ReadAbsMotor(int axis) ;
void load_config43(void);
void save_config43(void);
void ZRTPreMMody (void) ;
void load_ZRTPreM(int idx);
void save_ZRTPreM(int idx);
uint8 WaitR_CMD(DOS_ADDR addr,uint8	axis, uint8 (*chk_fun)(uint8 ),char *mes,uint32 loop_times,DOS_ADDR W_CMD_addr, uint8 cmd) ;
void KeyTDecDisA(void) ;
void load_config42(void) ;
void save_config42(void) ;
void load_TDecDisA(int idx) ;
void save_TDecDisA(int idx) ;
void load_config41(void) ;
void save_config41(void);
void load_TDecMode();
void save_TDecMode();
void TDecModeMody (void);
void load_TDecDis();
void save_TDecDis();
void TDecDisMody (void);
void TDecDisAMody (void);
void TTDecDisAMody (void);
uint16 SetTDec(int idx,int touchno) ;
void load_config40(void) ;
void save_config40(void);
long absval(long tt) ;
void WorkModeMody (void) ;
void load_WorkMode() ;
void save_WorkMode();
long cal_rpm(int axis , long tms , long tdist) ;
void TblSETSPDMody();
void TblSPDPlusMody();
void TblSPDMinusMody();
void TblSPDFunMody() ;
void load_bTblSETSPD(int axis,int idx) ;
void save_bTblSETSPD(int axis,int idx);
void load_bTblSPDPlus(int axis,int idx);
void save_bTblSPDPlus(int axis,int idx);
void load_bTblSPDMinus(int axis,int idx);
void save_bTblSPDMinus(int axis,int idx);
void load_bTblSPDFun(int axis,int idx);
void save_bTblSPDFun(int axis,int idx);
void DispFileReadError_q (short wr,short wr2);
void SPDMotorIDMody() ;
void DispSPDMotorIDFrame_q (void) ;
SDWORD Grid2_ExtGrid(SDWORD mov) ;
void mdy_PM_6xxY() ;
void modify_progSPD() ;
void cal_G1ref(ept_DWORD ref) ;
void G1RateMody (void) ;
void Gccyfile(int fileno) ;
void Cvtmotor_grads() ;
void ascii_out(SCRN_XY x , SCRN_XY y , COLOR_T color , Cptr buf ,bool reverse ) ;
void DispParaExt11Frame_q (void) ;
void DispSPDLinkMode_q (void) ;
void DispParaExt12Frame_q (void) ;
void DispParaExt13Frame_q (void) ;
void ManSpeed_PMfunMody (void) ;
void RORSpeed_PMfunMody (void) ;
void DefSpeed_PMfunMody (void) ;
void DispParaExt11_q (void) ;
void DispParaExtSPDLinkMode_q (void);
void DispParaExt12_q (void) ;
void DispParaExt13_q (void) ;
void load_ManSpeed_PMfun(void) ;
void save_ManSpeed_PMfun(void) ;
void load_RORSpeed_PMfun(void) ;
void save_RORSpeed_PMfun(void) ;
void load_DefSpeed_PMfun(void) ;
void save_DefSpeed_PMfun(void) ;
void load_ZrtCorr(int idx);
void save_ZrtCorr(int idx);
void load_config27(void) ;
void save_config27(void) ;
void load_config28(void) ;
void save_config28(void) ;
void CvtManSpeed_PMfun() ;
void CvtRORSpeed_PMfun() ;
void CvtDefSpeed_PMfun() ;
void SetSpeed_PMfun(uint8 bSpeed_PMfun[]) ;
void FillSpeed_PMfun(ActTbl_t HUGE *a_tbl ,WORD	&idx,uint8 Speed_P,uint8 Speed_M,uint8 Speed_fun) ;
void MdySpeed_PMfun(ActTbl_t HUGE *a_tbl ,WORD	idx,uint8 Speed_P,uint8 Speed_M,uint8 Speed_fun) ;
void ProgCur_Position (int path);
void ProgCur_Gchang ();
void Key_ChangFlashColor();
void ZrtCorrMody (void);
void DispZrtCorr_q(void);
void DispParaWin_Speed_PMfun_q (short all);
void DispParaSpeed_PMfun_q (void);
void DispParaField_Speed_PMfun_q(void);
void DispPara_Speed_PMfun_q(void);
void MdySpeed_PMfun(ActTbl_t HUGE *a_tbl ,WORD	idx,uint8 Speed_PMfun[]) ;
void SPDPlusMody (void);
void SPDMinusMody (void);
void SPDFunMody (void);
void SPDRateMody (void);
void load_SPDPlus(int idx);
void save_SPDPlus(int idx);
void load_SPDMinus(int idx);
void save_SPDMinus(int idx);
void load_SPDFun(int idx);
void save_SPDFun(int idx);
void load_SPDRate(int idx);
void save_SPDRate(int idx);
void load_config45(void) ;
void save_config45(void) ;
void load_config29(void) ;
void save_config29(void) ;
void CvtSPDPlus(int idx);
void CvtSPDMinus(int idx);
void CvtSPDFun(int idx);
void CvtSPDRate(int idx);
void SetSpeed_PMfun(uint8 bSpeed_PMfun[]) ;
uint8 check_use_axis_set(bool have_mov[], uint8 pm_set[],bool choose);
uint8 chk_PMfun_axis(uint16 cmd);
void GenPMfun (ActTbl_t HUGE  *a_tbl, WORD &idx);
void WileSTOPMody (void);
void WireTimeMody (void);
void WireTime (void);
void load_WileSTOP();
void save_WileSTOP();
void load_config30(void);
void save_config30(void);
void load_WireTime();
void save_WireTime();
void load_config76(void);
void save_config76(void);
void load_Max(int idx);
void save_Max(int idx);
void load_Min(int idx);
void save_Min(int idx);
void load_Max_D();
void save_Max_D();
void load_Min_D();
void save_Min_D();
void MaxMody (void);
void MinMody (void);
void load_config31(void);
void save_config31(void);
void load_config32(void);
void save_config32(void);
void load_config34(void);
void save_config34(void);
void load_config35(void);
void save_config35(void);
void load_config36(void);
void save_config36(void);
void load_config37(void);
void save_config37(void);
void load_config38(void);
void save_config38(void);
void load_config39(void);
void save_config39(void);
void load_Touch_Stop_Flag();
void save_Touch_Stop_Flag();
void load_config33(void);
void save_config33(void);
void Touch_Stop_FlagMody (void);
void WileModeMody (void);
void load_WileMode();
void save_WileMode();
void CursorModeMody (void);
void load_CursorMode();
void save_CursorMode();
void ReadKeyDate();
void DIALOG_JMPNNMody ();
void DISK_IOMody ();
void LoadClassData (DWORD file_no);
void SaveClassData (DWORD file_no);
void load_MANUFACTORY();
void save_MANUFACTORY();
void load_keyboard_type();
void save_keyboard_type();
void  InitChRollData(void);
void  GRID_TO_XGRID(BYTE axis,SDWORD &tt);
void XGRID_TO_GRID(BYTE axis, SDWORD &tt);
void load_SPDLinkMode(void);
void save_SPDLinkMode(void);
void SPDLinkModeMody (void);
void load_config49(void);
void save_config49(void);
void load_config50(void);
void save_config50(void);
void load_config51(void) ;
void save_config51(void) ;
void load_ABDir(int idx) ;
void save_ABDir(int idx) ;
void ABDirMody (void) ;
void SetPMfun(void);
void Set608PMfun(void);
void clr_bTblSETSPD() ;
void save_G1Rate_Rate_bTbl() ;
void init_var_table() ;
void load_config52(void);             
void save_config52(void);
void load_config53(void);
void save_config53(void);
void load_TDelay();
void save_TDelay();
void TDelayMody (void);
void MotFuncMody(void);
void load_MotFunc(int idx);
void save_MotFunc(int idx);
void Init_MotFunc(void);
void load_config54(void);
void save_config54(void);
void SetAxisName(uint8 axis);
void UsePMfunMody(void);
void Touch_rateMody(void);
void PRODDELAYMody(void);
void XMINUSMody(void);
void KEYLOCKMody(void);
void OilChkMody(void);
void load_UsePMfun(void);
void save_UsePMfun(void);
void load_config55(void);
void save_config55(void);
void BiosRstMody(void);
bool ChkUsePMfun(void);
void nY0Mody(void);
void CusRateMody(void);
void SAFE_TEST_new();
void check_SAFE_ON(int e1,int e2,int e3,int e4,int e5,int e6,int e7,int e8,int safe_plugin)	;
void SAFE_ON_new(int safe_plugin);
void load_CusRate(int idx);
void save_CusRate(int idx);
void load_config67(void);
void save_config67(void);
void load_config68(void);
void save_config68(void);
void load_config69(void);
void save_config69(void);
void load_config70(void);
void save_config70(void);
void load_config72(void);
void save_config72(void);
void load_SlideLimit();
void save_SlideLimit();
void load_config74(void);
void save_config74(void);
void load_AirOff();
void save_AirOff();
void load_config75(void);
void save_config75(void);
void load_config77(void);
void save_config77(void);
void load_nY0(int idx);
void save_nY0(int idx);
void load_config56(void);
void save_config56(void);
void KeyResetLock(void);
void KeyResetLock1(void);
void ARUN_DISP_REPAIR_Y(void);
void ARUN_DISP_STEP_CURPOS(void);
void ARUN_DISP_TEST_PMFUN(void);
void ARUN_DISP_5200(void);
void ARUN_DISP_5218(void);
void ARUN_DISP_5220(void);
WORD cal_cnt8254(WORD speed, WORD spd);
void nSet8254 (uint16 cnt);
void nInitMotorIo (void);
void ResetLED (void);
bool GetMotorZrt(uint8 axis);
void SetCutterMaxLimit(void);
void CvtXGRID(void);
bool CopyConfig() ;
void LOWSPDMody (void);
void load_LOWSPD();
void save_LOWSPD();
void load_config57(void);              
void save_config57(void);
void CvtLOWSPD(int idx);
void MDY_PM(uint8 &PLUS_SPD,uint8 &Minus_SPD,DWORD &axis_ref,uint8 LOW_SPD);
void  ADD_Delay_ms(ActTbl_t HUGE	*a_tbl , WORD &idx , DWORD ms);
void load_config58(void);
void save_config58(void);
void load_ZrtCye(uint8 axis);
void save_ZrtCye(uint8 axis);
void ZrtCyeMody (void);
void load_ZrtPos(uint8 axis);
void save_ZrtPos(uint8 axis);
void ZrtPosMody (void);
void load_GEAR0(uint8 axis);
void save_GEAR0(uint8 axis);
void load_GEAR1(uint8 axis);
void save_GEAR1(uint8 axis);
void GEAR0Mody (void);
void GEAR1Mody (void);
void leave_snesor(BYTE axis);
void reverse_mov_ZRT(BYTE axis,uint32 mov);
void SensorHighLowMody(void);
void load_SensorHighLow(int idx);
void save_SensorHighLow(int idx);
void load_config59(void);
void save_config59(void);
void nMotorTypeMody(void);
void load_nMotorType(int idx);
void save_nMotorType(int idx);
void load_config60(void);
void save_config60(void);
void AxisNoMody(void);
void load_AxisNo(void);
void save_AxisNo(void);
void load_config61(void);
void save_config61(void);
void DispManMovLimit(uint8 slide);
void DispParaPRODPASS_nopass_q (void);
void DispParaOilChk_nopass_q (void);
void load_config62(void);
void save_config62(void);
void load_PRODPASS();
void save_PRODPASS();
void load_XMINUS();
void save_XMINUS();
void load_KEYLOCK();
void save_KEYLOCK();
void load_OilChk();
void save_OilChk();
void load_FileRate(int idx);
void save_FileRate(int idx);
void load_FileFastRate(int idx);
void save_FileFastRate(int idx);
void load_PRODDELAY();
void save_PRODDELAY();
void load_Touch_rate();
void save_Touch_rate();
void ARUN_PROPASS();
void Adjust_AZero_NewH();
void SetSystemDate();
void SetSystemTime();
void cal_rrpm(struct TIMER  t1,struct TIMER &ticks,int &rpm , int &rpmd);
void WaitMotorNear(uint8 axis, DWORD NEARCNT_MAX,uint8 DIF);
void ADD_DisableRepairY(ActTbl_t HUGE	*a_tbl , WORD &idx);
void ADD_WaitMotorNear(ActTbl_t HUGE	*a_tbl , WORD &idx , BYTE axis,uint8 DIF);
void ChkToPosMody(void);
void load_ChkToPos(int idx);
void save_ChkToPos(int idx);
int phys_mem_left() ;
void cal_ref(DWORD ref[],double speed) ;
void digitdot_q(short lx , short ly ,COLOR_T color) ;
void digitdot_proc(void *ptr) ;
short WriteFileBuf (char *filename ,long off, short size, char *data);
void DispMarkerLine (WORD y, ProgTypeExlarge_t huge* progex, WORD mode);
void y_suspendLED() ;
void GetMsgWinXY(short &lx , short &ly ,short &rx , short &ry) ;
void save_G2Mode();
void save_SPDMode();
void MarkerMody(void);
void Key_Marker(void);
void bMotorNEARMody (void);
void G2ModeMody (void);
void SPDModeMody (void);
void SlideLimitMody (void);
void AirOffMody (void);
void Adjust_ZZero(void);
void CHG_BAUD (int com ,int num1, int num2) ;
void init_rs232_NewH();
void Sprintf_Clr() ;
void Sprintf_Clr(COLOR_T   fclr ) ;
void Sprintf_Clr(COLOR_T   fclr , COLOR_T bclr) ;
void GenKeyKind() ;
uint32 TxTest(unsigned char TxBuf[]);
void AxisLED(uint8 axis) ;
void AB_manual_to_zero_NewH(bool &is_first_a);
void DispMarkerWindow(void);
void Set3701_Sol (uint8 axis, uint8 dir, int32 ref, int32	mov	,int32 rmov,bool run,int32 ymov);
void IDMSMody(void) ;
bool ChkMarkerNum(char data);
void save_IDMS(int idx) ;
void CvtIDMS(int idx) ;
void calAutoidms(int axis) ;
void load_config63(void);
void save_config63(void);
void load_config64(void);
void save_config64(void);
void load_config65(void);
void save_config65(void);
void load_config66(void);
void save_config66(void);
COLOR_T MarkerCursorLineColor(char code);
void IfAxis5Colored(int endlen);
void Initidms();
void Initidms(int rate);
void Initidms(double rate);
void InitidmsG2(int axis,int rate);
long long filltbldt(int taxis , SDWORD dw[] , DWORD ref[],long long &cref);
long long filltbldt2(int taxis , SDWORD dw[] ,  DWORD ref[],long long &cref);
void fill_acttbl_idms(int axis , ActTbl_t HUGE *a_tbl,int idx,SDWORD  dw[]);
void SendCur_miss(void);





















